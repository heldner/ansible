-- man 5 imapfilter_config
options.timeout = 120
options.create = true
options.subscribe = true
options.expunge = true

{{ item.name }} = IMAP {
  server = "{{ item.server }}",
  username = "{{ item.username }}",
  password = "{{ item.password | trim }}",
  ssl = "tls13"
}

function print_tbl_items(tbl)
  for _, i in pairs(tbl) do
    log(string.format("%s", i))
  end
end

function get_len(tbl)
  local count = 0
  for k,v in pairs(tbl) do
      count = count + 1
  end
  return count
end

function account_folders(account)
  mailboxes, folders = account:list_all()
  log(string.format("Mailboxes length: %s", get_len(mailboxes)))
  print_tbl_items(mailboxes)
end

function move_to_inbox(acc, mboxname)
  mbox = acc[mboxname]:select_all()
  if not (get_len(mbox) == 0) then
    print("Length " .. mboxname .. ": " .. get_len(mvideo))
    mbox:move_messages(acc['INBOX'])
  end
  acc:delete_mailbox(mboxname)
end

function os.capture(cmd)
  local f = assert(io.popen(cmd, 'r'))
  local s = assert(f:read('*a'))
  f:close()
  return s
end

function log(msg)
  print(os.date("%Y-%m-%d-%H%M%S ") .. msg)
end

function idle_folder(folder, acc, name)
  while(true) do
    log("Wait for email")
    update, event = acc[folder]:enter_idle()
    if (update) then
      log("Run isync")
      os.execute(string.format("mbsync -q %s", name))
    end
  end
end

account_folders({{ item.name }})
idle_folder('INBOX', {{ item.name }}, '{{ item.name }}')
--print_tbl_items(mvideo)

