---
# vim:ft: ansible:

# We do this via the logged in user, so that ssh forwarding agent can be utilized.
# No ssh keys repuired in production.

- name: clone app to tmp
  sudo: no
  git:
    repo: '{{ item.repo }}'
    dest: '/tmp/{{ item.name }}'
    accept_hostkey: yes
    depth: 1
    version: '{{ git_version }}'
  with_items: '{{ application }}'

# We move to our build user, utilize sudo so we KNOW we have perms.
- name: move to build directory
  sudo: yes
  command: > 
           rsync --recursive --links --delete-after --whole-file --cvs-exclude
           /tmp/'{{ item.name }}'/
           '{{ build_path }}'/'{{ item.name }}'/application
  with_items: application

# Remove dir created by clone.
- name: remove tmp directory from git clone
  file:
    path: /tmp/'{{ item.name }}'
    state: absent
  with_items: application

- name: change ownership of application to build_user
  sudo: yes
  file:
    path: '{{ build_path}}'/'{{ item.name }}'
    mode: 0755
    owner: "'{{ build_user }}'"
    group: "'{{ build_user }}'"
    state: directory
  with_items: application
  tags:
    - debug

# TOOD handle web user group for RPM vs Debian systems.
- name: change web_root dir permissions
  file:
    path: '{{ web_root }}'/'{{ item.name }}'
    mode: 0755
    owner: "'{{ build_user }}'"
    group: "www-data"
    state: directory
  with_items: application

- name: install virtualenv requirements
  sudo_user: "'{{ item.appuser }}'"
  pip:
    requirements: '{{ build_path }}'/'{{ item.name }}'/application/requirements.txt
    virtualenv: '{{ build_path }}'/'{{ item.name }}'
  with_items: application

# We're gonna use a user with a home dir, because we don't want a libs living in
# www directory unless we have to.
- name: generate HTML 
  command: >
          '{{ build_path }}'/'{{ item.name }}'/bin/python
          '{{ build_path }}'/'{{ item.name }}'/bin/pelican
          -s publishconf.py
          -o '{{ web_root }}'/'{{ item.name }}'
          chdir: '{{ build_path }}'/'{{ item.name }}'/application
  with_items: application

# TOOD handle web user group for RPM vs Debian systems.
- name: make sure webserver group has read permissions
  file:
    path: '{{ web_root }}'/'{{ item.name }}'
    mode: 0755
    owner: "'{{ build_user }}'"
    group: "www-data"
    state: directory
    recurse: yes
  with_items: application
